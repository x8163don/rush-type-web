---

---

<html>
  <body>
    <script src="https://apis.google.com/_/scs/abc-static/_/js/k=gapi.lb.zh_TW.9odfnpLCH7U.O/m=client,picker/rt=j/sv=1/d=1/ed=1/rs=AHpOoo_sGC6J0ApilQ0u6CItjwmsimfBJA/cb=gapi.loaded_0?le=scs" async=""/>
    <script async="" defer="" src="https://apis.google.com/js/api.js" onload="gapiLoaded();" gapi_processed="true" />
    <script>
      const EXTENSION_ORIGIN = 'chrome-extension://mdiaogojdgljpfapolbgdlflobbagned';
      const SCOPES = 'https://www.googleapis.com/auth/drive.file';
      const CLIENT_ID = '1090813013146-2tk4ln88dt20tdn1vj6p9ga8349h65mi.apps.googleusercontent.com';
      const API_KEY = 'AIzaSyAaaWKF8wLm7OQMBnEAzRP3FI5UVmMCTM8';
      const APP_ID = '1090813013146';

      let tokenClient;
      let accessToken = null;
      let locale = null;
      let filesSelected = false;
      let pickerInited = false;
      let gisInited = false;

      window.addEventListener(
        'message',
        async (event) => {
          if (event.origin !== EXTENSION_ORIGIN) {
            return;
          }

          if (event.data.action === 'configuration') {
            locale = event.data.locale;
            accessToken = event.data.accessToken;
            filesSelected = Boolean(event.data.filesSelected);
          }

          if (event.data.action === 'createPicker') {
            createPicker();
          }
        },
        false
      );

      function gapiLoaded() {
        gapi.load('client:picker', initializePicker);
        console.log('GAPI loaded.');
      }

      async function initializePicker() {
        await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
        pickerInited = true;
        maybeEnableButtons();
      }

      function maybeEnableButtons() {
        if (pickerInited && gisInited) {
          console.log('Picker and GIS initialized. Buttons can be enabled.');
        }
      }

      function handleAuthClick() {
        tokenClient.callback = async (response) => {
          if (response.error !== undefined) {
            throw response;
          }

          accessToken = accessToken || response.access_token;
          await createPicker();
        };

        if (tokenClient.popup) {
          tokenClient.popup.focus();
        }

        if (accessToken === null) {
          tokenClient.requestAccessToken({ prompt: 'select_account' });
        } else {
          tokenClient.requestAccessToken({ prompt: '' });
        }
      }

      function handleSignoutClick() {
        if (accessToken) {
          google.accounts.oauth2.revoke(accessToken);
          accessToken = null;
        }
      }

      function createPicker() {
        const view = new google.picker.DocsView(google.picker.ViewId.SPREADSHEETS).setMode(
          google.picker.DocsViewMode.LIST
        );
        view.setMimeTypes('spreadsheet/*,application/vnd.google-apps.spreadsheet');

        const picker = new google.picker.PickerBuilder()
          .enableFeature(google.picker.Feature.NAV_HIDDEN)
          .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
          .setLocale(locale || 'en')
          .setDeveloperKey(API_KEY)
          .setAppId(APP_ID)
          .setOAuthToken(accessToken)
          .addView(view)
          .setOrigin(EXTENSION_ORIGIN)
          .setCallback(pickerCallback)
          .build();

        picker.setVisible(true);

        window.parent.postMessage({ action: 'pickerLoaded' }, EXTENSION_ORIGIN);
      }

      async function pickerCallback(data) {
        if (data.action === google.picker.Action.PICKED) {
          window.parent.postMessage(
            {
              action: 'filesSelected',
              files: data[google.picker.Response.DOCUMENTS],
            },
            EXTENSION_ORIGIN
          );
        } else if (data.action === google.picker.Action.CANCEL) {
          window.parent.postMessage({ action: 'pickerCanceled' }, EXTENSION_ORIGIN);
        }
      }
    </script>
  </body>
</html>
